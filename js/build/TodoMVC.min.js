/*! TodoMVC 2013-12-30 */
var app = app || {};
app.Todo = Backbone.Model.extend({defaults: {title: "", completed: !1}, toggle: function () {
    this.save({completed: !this.get("completed")})
}});
var app = app || {}, TodoList = Backbone.Collection.extend({model: app.Todo, localStorage: new Backbone.LocalStorage("todos-backbone"), completed: function () {
    return this.filter(function (a) {
        return a.get("completed")
    })
}, remaining                                                     : function () {
    return this.without.apply(this, this.completed())
}, nextOrder                                                     : function () {
    return this.length ? this.last().get("order") + 1 : 1
}, comparator                                                    : function (a) {
    return a.get("order")
}});
app.Todos = new TodoList;
var app = app || {};
app.AppView = Backbone.View.extend({el: "#todoapp", statsTemplate: _.template($("#stats-template").html()), events: {"keypress #new-todo": "createOnEnter", "click #clear-completed": "clearCompleted", "click #toggle-all": "toggleAllComplete"}, initialize: function () {
    this.allCheckbox = this.$("#toggle-all")[0], this.$input = this.$("#new-todo"), this.$footer = this.$("#footer"), this.$main = this.$("#main"), this.listenTo(app.Todos, "add", this.addOne), this.listenTo(app.Todos, "reset", this.addAll), this.listenTo(app.Todos, "change:completed", this.filterOne), this.listenTo(app.Todos, "filter", this.filterAll), this.listenTo(app.Todos, "all", this.render), app.Todos.fetch()
}, render                             : function () {
    var a = app.Todos.completed().length, b = app.Todos.remaining().length;
    app.Todos.length ? (this.$main.fadeIn(800), this.$footer.fadeIn(800), this.$footer.html(this.statsTemplate({completed: a, remaining: b})), this.$("#filters li a").removeClass("selected").filter('[href="#/' + (app.TodoFilter || "") + '"]').addClass("selected")) : (this.$main.hide(), this.$footer.hide()), this.allCheckbox.checked = !b
}, addOne                             : function (a) {
    var b = new app.TodoView({model: a});
    this.$("#todo-list").append(b.render().el)
}, addAll                             : function () {
    this.$("#todo_list").html(""), app.Todos.each(this.addOne, this)
}, filterOne                          : function (a) {
    a.trigger("visible")
}, filterAll                          : function () {
    app.Todos.each(this.filterOne, this)
}, newAttributes                      : function () {
    return{title: this.$input.val().trim(), order: app.Todos.nextOrder(), completed: !1}
}, createOnEnter                      : function (a) {
    a.which === ENTER_KEY && this.$input.val().trim() && (app.Todos.create(this.newAttributes()), this.$input.val(""))
}, clearCompleted                     : function () {
    return _.invoke(app.Todos.completed(), "destroy"), !1
}, toggleAllComplete                  : function () {
    var a = this.allCheckbox.checked;
    app.Todos.each(function (b) {
        b.save({completed: a})
    })
}});
var app = app || {};
app.TodoView = Backbone.View.extend({tagName: "li", template: _.template($("#item-template").html()), events: {"click .toggle": "toggleCompleted", "click .destroy": "clear", "dblclick label": "edit", "keypress .edit": "updateOnEnter", "blur .edit": "close"}, initialize: function () {
    this.listenTo(this.model, "change", this.render), this.listenTo(this.model, "destroy", this.remove), this.listenTo(this.model, "visible", this.toggleVisible)
}, render                                   : function () {
    return this.$el.html(this.template(this.model.toJSON())), this.$el.toggleClass("completed", this.model.get("completed")), this.toggleVisible(), this.$input = this.$(".edit"), this
}, toggleVisible                            : function () {
    this.$el.toggleClass("hidden", this.isHidden())
}, isHidden                                 : function () {
    var a = this.model.get("completed");
    return!a && "completed" === app.TodoFilter || a && "active" === app.TodoFilter
}, toggleCompleted                          : function () {
    this.model.toggle()
}, edit                                     : function () {
    this.$el.addClass("editing"), this.$input.focus()
}, close                                    : function () {
    var a = this.$input.val().trim();
    a ? this.model.save({title: a}) : this.clear(), this.$el.removeClass("editing")
}, clear                                    : function () {
    this.model.destroy()
}, updateOnEnter                            : function (a) {
    a.which === ENTER_KEY && this.close()
}});
var app = app || {}, Workspace = Backbone.Router.extend({routes: {"*filter": "setFilter"}, setFilter: function (a) {
    a && (a = a.trim()), app.TodoFilter = a || "", app.Todos.trigger("filter")
}});
app.TodoRouter = new Workspace, Backbone.history.start();
var app = app || {}, ENTER_KEY = 13;
$(function () {
    new app.AppView, $("a#can-i-use").click(function (a) {
        a.preventDefault();
        var b = $(this).prop("href");
        window.open(b, "CanIUse", "menubar=no,scrollbars=yes,status=no,resizable=yes,top=10,left=10,dependent=yes,alwaysRaised=yes")
    })
});